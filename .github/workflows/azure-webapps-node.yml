# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ $default-branch ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: on-call-coordinator    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: 'server'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '18.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build-and-deploy:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - uses: actions/checkout@v3
    # Setting up an empty MySQL database
    # Note the syntax used to retrieve the environment variables specified above
    # The ubuntu-latest image happens to include mysql, but another DB such as postgres may require more setup
    - name: Use Node.js 18
      # We are using a pre-built action to get our runner ready to build and test our Node project
      uses: actions/setup-node@v3
      # This action accepts some parameters
      with:
        node-version: 18
        cache: 'npm'
        # Because our root directory is not the same as our project directory, 
        # we have to specify a path to the dependency file
        cache-dependency-path: server/package-lock.json
    # `npm ci` (clean install) downloads all our projects dependencies
    # NOTE: the working directory for these commands is specified in defaults.run.working-directory below
    - run: npm ci
    # `npm run build` will produce a production-ready build of the application
    # Node projects don't necessarily need to be 'built' so this step may not be defined in package.json
    - run: npm run build --if-present
    - name: 'Deploy to Azure WebApp'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}


defaults:
# Our back-end project directory is 'server', so set our working directory for npm commands to work
  run:
    working-directory: server